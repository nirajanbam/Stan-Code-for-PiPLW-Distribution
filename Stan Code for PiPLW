##Stan Code for PIPLW###
###Model 1 is for sensitivty analysis##
model1<-"functions {
  real my_quantile_rng(real rho, real omega) {
    real u = uniform_rng(0, 1);
    real pi_val = 3.141592653589793;  // Define pi manually
    real k = log(1 + u * (pi_val - 1)) / log(pi_val);  // Fixed 'pi'
    real t = (1 - k) / (1 + k);
    return pow(-(1 / rho) * log(t), 1 / omega);
  }

  real my_model_lpdf(real x, real rho, real omega) {
    real pi_val = 3.141592653589793;  // Define pi manually
    real z = exp(-rho * pow(x, omega));
    real t = 2 * rho * omega * log(pi_val) / (pi_val - 1);
    real gx = pow(x, omega - 1);
    real tmp = (1 - z) / (1 + z);
    return log(t * gx * z * pow(1 + z, -2) * pow(pi_val, tmp));  // Use 'pi_val' instead of 'pi'
  }
}

data {
  int<lower=1> N;          // Number of observations
  real<lower=0> x[N];      // Observations
}

parameters {
  real<lower=0> rho;     // Shape parameter
  real<lower=0> omega;      // Scale parameter
}

model {
  // Priors
  rho ~ gamma(0.1, 1);
  omega ~ gamma(0.1, 1);
  
  // Likelihood
  for (n in 1:N) {
    target += my_model_lpdf(x[n] | rho, omega);  
  }
}

generated quantities {
  real log_lik[N];  // Store log-likelihood for each observation
  

  real lprior; // joint log prior


  for (n in 1:N) {
    log_lik[n] = my_model_lpdf(x[n] | rho, omega);  // Log-likelihood
    
   
    lprior=gamma_lpdf(rho|0.1, 1)+gamma_lpdf(omega|0.1, 1);
  }
}

"
##Stan Code for PIPWL Distributio###
model<-"functions {
  real my_quantile_rng(real rho, real omega) {
    real u = uniform_rng(0, 1);
    real pi_val = 3.141592653589793;  // Define pi manually
    real k = log(1 + u * (pi_val - 1)) / log(pi_val);  // Fixed 'pi'
    real t = (1 - k) / (1 + k);
    return pow(-(1 / rho) * log(t), 1 / omega);
  }

  real my_model_lpdf(real x, real rho, real omega) {
    real pi_val = 3.141592653589793;  // Define pi manually
    real z = exp(-rho * pow(x, omega));
    real t = 2 * rho * omega * log(pi_val) / (pi_val - 1);
    real gx = pow(x, omega - 1);
    real tmp = (1 - z) / (1 + z);
    return log(t * gx * z * pow(1 + z, -2) * pow(pi_val, tmp));  // Use 'pi_val' instead of 'pi'
  }
}

data {
  int<lower=1> N;          // Number of observations
  real<lower=0> x[N];      // Observations
}

parameters {
  real<lower=0> rho;     // Shape parameter
  real<lower=0> omega;      // Scale parameter
}

model {
  // Priors
  rho ~ gamma(0.1, 1);
  omega ~ gamma(0.1, 1);
  
  // Likelihood
  for (n in 1:N) {
    target += my_model_lpdf(x[n] | rho, omega);  
  }
}

generated quantities {
  real log_lik[N];  // Store log-likelihood for each observation
  real xrep[N];
  for (n in 1:N) {
    log_lik[n] = my_model_lpdf(x[n] | rho, omega);  // Log-likelihood
    
   xrep[n] = my_quantile_rng(rho, omega); 
  }
}

"

# Data#
x <- c(0.39, 0.85, 1.08, 1.25, 1.47, 1.57, 1.61, 1.61, 1.69, 1.80, 1.84,
       1.87, 1.89, 2.03, 2.03, 2.05, 2.12, 2.35, 2.41, 2.43, 2.48, 2.50,
       2.53, 2.55, 2.55, 2.56, 2.59, 2.67, 2.73, 2.74, 2.79, 2.81, 2.82,
       2.85, 2.87, 2.88, 2.93, 2.95, 2.96, 2.97, 3.09, 3.11, 3.11, 3.15,
       3.15, 3.19, 3.22, 3.22, 3.27, 3.28, 3.31, 3.31, 3.33, 3.39, 3.39,
       3.56, 3.60, 3.65, 3.68, 3.70, 3.75, 4.20, 4.38, 4.42, 4.70, 4.90)


N<- length(x)

library("rstan")
library(bayesplot)
library(coda)
library(shinystan)
library(ggplot2)
library(dlm)
library(priorsense)

fit<- stan(model_code = model, iter = 10000, seed=1, chains = 4, cores = 4,
           data = list(N=N, x=x), control = list(adapt_delta = 0.99, max_treedepth =15))


#$$$$$$$$$$$$$$$$ Table creation of output *******

tab<- summary(fit, pars= c("rho", "omega", "lp__"), chain=0, 
              probs = c(0.5, 0.025, 0.975), digits = 4)$summary
tab<- round(tab, 4)
tab<- as.data.frame(tab, keep.rownames= c("rho", "omega", "log Likelihood"))
tab
write.csv(tab, file = "summary_stat.csv",
          row.names = TRUE, col.names = TRUE)
 
### Using coda package ###########
rho<- extract(fit, pars="rho")[[1]]
rho<- as.data.frame(rho)
rho<- as.mcmc(rho)
HPDinterval(rho, 0.95)

omega<- extract(fit, pars="omega")[[1]]
omega<- as.data.frame(omega)
omega<- as.mcmc(omega)
HPDinterval(omega, 0.95)

lp<- extract(fit, pars="lp__")[[1]]
lp<- as.data.frame(lp)
lp<- as.mcmc(lp)
HPDinterval(lp, 0.95)

launch_shinystan(fit)

windows(8, 2.5)
trace<- stan_trace(fit, pars = c("rho", "omega"), alpha=1)
trace1<- trace + scale_color_manual(values = c( "blue", "green", "purple","black"))

trace + scale_color_brewer(type = "div") + theme(legend.position = "top")

facet_style<- theme(strip.background = ggplot2::element_rect(fill = "gold"), 
                    strip.text = ggplot2::element_text(size = 8, color = "black"))

(trace<- trace1 + facet_style) # very good for report


# ergodic mean plot
rho<- extract(fit, 'rho')[[1]]
em <- ergMean(as.numeric(rho), m = 1)
rhoMean<- mcmcMean(as.numeric(rho), sd= FALSE)
windows(5,5)
par(mar = c(4.5, 3.0, 1.5, 1.5))
plot(ts(em, start= 1), xlab="Iteration", ylab="", lwd=2, main="rho")
abline(h= rhoMean, lty=2, lwd=2, col="red")
#ggsave("rho_ergodic.pdf", width = 5, height = 5)

#omega
omega<- extract(fit, 'omega')[[1]]
em <- ergMean(as.numeric(omega), m = 1)
omegaMean<- mcmcMean(as.numeric(omega), sd= FALSE)
windows(5, 5)
par(mar = c(4.5, 3.0, 1.5, 1.5))
plot(ts(em, start= 1), xlab="Iteration", ylab="", lwd=2, main="omega")
abline(h= omegaMean, lty=2, lwd=2, col="red")


#visual summary HISTOGRAM WITH RUG  %%%%%
library(dplyr)
rho<- extract(fit, 'rho')[[1]]
rho<- as.data.frame(rho)
windows(5,5)
rho %>% ggplot(aes(rho))+
  geom_histogram( aes(y=..density..), binwidth = 0.02, fill= "royalblue", col="black")+
  ylab("")+
  xlab(expression(rho))+
  geom_density(col= "firebrick", alpha= 0.1, lwd=1)+
  geom_rug(col="cyan")

##### Hist of bata with Rug
omega<- extract(fit, 'omega')[[1]]
omega<- as.data.frame(omega)
windows(5,5)
omega %>% ggplot(aes(omega))+
  geom_histogram( aes(y=..density..), binwidth = 0.1, fill= "royalblue", col="black")+
  ylab("")+
  xlab(expression(omega))+
  geom_density(col= "firebrick", alpha= 0.07, lwd=1)+
  geom_rug(col="cyan")
#ggsave("omega_hist_plot.pdf", width = 5, height = 5)

###  Auto-correlation plot###
color_scheme_set("brewer-Spectral")
windows(6,4)
(p <- mcmc_acf_bar(fit, pars = c("rho", "omega"), alpha=2))

# add horiztonal dashed line at 0.5
p + hline_at(0.5, linetype = 2, size = 0.15, alpha=2, color = "red")
#ggsave("auto_corr_plot.pdf", width = 5, height = 5)


color_scheme_set("viridisC")
windows(6,5)
parms<-rstan::extract(fit)
y<-parms$xrep
ppc_boxplot(x,y[c(10, 50, 100), ],  size = 0.50, alpha = 2.5)


color_scheme_set("viridisC")
windows(5,5)
ppc_ecdf_overlay(x, y[1:200, ])


color_scheme_set("brewer-Spectral")
windows(5,5)
ppc_dens_overlay(x, y[1300:1400,], alpha = 1.75)


### Error Histogram%%%%%%%%%%%%%%%%%%%%%%%%%%%
color_scheme_set("viridisC")
windows(6,4)
ppc_error_hist(x, y[c(5000, 10000, 15000, 20000), ], binwidth = 0.7, alpha = 2)

#### P-value of Mean and Variance of PPC###
# just using example objects that come with bayesplot
y <-x
yrep <- parms$xrep

# ppc pvalue plot###
plot1 <- ppc_stat(y, yrep, stat = "mean")
plot2 <- ppc_stat(y, yrep, stat = "var")

# calculate proportion of stat(yrep) > stat(y)
library(ggplot2)
p_value_mean <- mean(apply(yrep, 1, mean) > mean(y))
p_val_variance <- mean(apply(yrep, 1, var) > var(y))

plot3<-plot1 + 
  yaxis_text() +    # helps see y-axis labels while positioning
  annotate("text", x = 3, y = 100, label = paste("p =", round(p_value_mean, 4)))

plot4<-plot2 + 
  yaxis_text() +    # helps see y-axis labels while positioning
  annotate("text", x = 1.2, y = 100, label = paste("p =", round(p_val_variance, 4)))

###Sensitivity Analysis##
fit1<- stan(model_code = model1, iter = 10000, seed=1, chains = 3, cores = 4,
           data = list(N=N, x=x), control = list(adapt_delta = 0.99, max_treedepth =15))

powerscale_plot_dens(fit1)
powerscale_plot_ecdf(fit1)
